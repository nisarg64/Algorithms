/**
 * 
 */

/**
 * @author Nisarg Program : Binary Tree Implementation and Traversal
 */
public class BTree {

	public static class Node {
		Node left;
		Node right;
		int data;

		public Node(int data) {
			this.data = data;
		}
	}

	public static void insertNode(Node root, int data) {
		if (data <= root.data) {
			if (root.left != null) {
				insertNode(root.left, data);
			} else {
				root.left = new Node(data);
			}
		} else if (data > root.data) {
			if (root.right != null) {
				insertNode(root.right, data);
			} else
				root.right = new Node(data);
		}
	}

	public static void inOrderTraversal(Node root) {
		if (root == null) {
			return;
		} else {
			inOrderTraversal(root.left);
			System.out.print(root.data + " ");
			inOrderTraversal(root.right);
		}
	}

	public static void preOrderTraversal(Node root) {
		if (root == null) {
			return;
		} else {
			System.out.print(root.data + " ");
			preOrderTraversal(root.left);
			preOrderTraversal(root.right);
		}
	}

	public static void postOrderTraversal(Node root) {
		if (root == null) {
			return;
		} else {
			postOrderTraversal(root.left);
			postOrderTraversal(root.right);
			System.out.print(root.data + " ");
		}
	}

	public static int height(Node root) {
		if (root == null)
			return 0;
		else {
			int l_height = height(root.left);
			int r_height = height(root.right);

			if (l_height > r_height)
				return l_height + 1;
			else
				return r_height + 1;
		}
	}

	/**
	 * Level Order Traversal with O(n^2) time complexity
	 * 
	 * @param root
	 */
	public static void levelOrderTraversal(Node root) {
		// TODO Auto-generated method stub
		if (root == null)
			return;
		else {
			int h = height(root);
			for (int i = 1; i <= h; i++) {
				printLevelOrder(root, i);
			}
		}
	}

	public static void printLevelOrder(Node root, int level) {
		if (root == null)
			return;
		if (level == 1)
			System.out.print(root.data + " ");
		else if (level > 1) {
			printLevelOrder(root.left, level - 1);
			printLevelOrder(root.right, level - 1);
		}
	}

	/**
	 * Level Order Traversal using queue with O(n) time complexity
	 */
	public static void levelOrderTraversalUsingQueue(Node root) {

	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node root = new Node(4);
		insertNode(root, 1);
		insertNode(root, 5);
		insertNode(root, 3);
		insertNode(root, 6);
		insertNode(root, 2);
		insertNode(root, 8);
		insertNode(root, 1);

		System.out.println("\nInOrder Traversal: ");
		inOrderTraversal(root);
		System.out.println("\nPreOrder Traversal: ");
		preOrderTraversal(root);
		System.out.println("\nPostOrder Traversal: ");
		postOrderTraversal(root);
		System.out.println("\nLevelOrder Traversal: ");
		levelOrderTraversal(root);
		System.out.println("\nHeight of the tree:" + height(root));
		System.out.println("\nBFS Traversal: ");
		levelOrderTraversalUsingQueue(root);
	}

}
